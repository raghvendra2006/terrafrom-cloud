provider "aws" {
  region = "ap-south-1"
}

variable "environment" {
  description = "The environment to deploy (dev, uat, prod)"
  type        = string
}

variable "excluded_vpc_ids" {
  description = "List of VPC IDs to exclude from security group creation"
  type        = list(string)
  default     = ["vpc-akuya235723xb", "vpc-01d1e98034a6ded3", "vpc-jagdsyu763527"]
}

# Define a new VPC
resource "aws_vpc" "example" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name      = "example-vpc"
    env       = var.environment
    managedby = "terraform"
  }
}

# Local values for security group rules
locals {
  exclude_sg_deployment = contains(var.excluded_vpc_ids, aws_vpc.example.id)
  cidr_blocks_test1     = ["10.11.1.0/24", "10.11.2.0/24"]

  rules_block1 = flatten([
    for rule in [
      { ports = [23], protocols = ["tcp"], description = "Test TCP Port 23" },
      { ports = [60, 68], protocols = ["tcp", "udp"], description = "Test TCP Ports 60, 68 and UDP Ports 60, 68" }
      ] : [
      for protocol in rule.protocols : [
        for port in rule.ports : {
          from_port   = port
          to_port     = port
          protocol    = protocol
          cidr_blocks = local.cidr_blocks_test1
          description = rule.description
        }
      ]
    ]
  ])

  rules_map_block1 = { for idx, rule in local.rules_block1 : "${rule.from_port}-${rule.to_port}-${rule.protocol}-${idx}" => rule }

  cidr_blocks_test2 = ["1.1.1.0/24", "2.2.2.0/24"]

  rules_block2 = flatten([
    for rule in [
      { from_port = 0, to_port = 0, protocols = ["-1"], description = "Allow all traffic" },
      { from_port = 41000, to_port = 43000, protocols = ["tcp"], description = "New TCP Port Range 41000-43000" },
      { from_port = 41000, to_port = 43000, protocols = ["udp"], description = "New UDP Port Range 41000-43000" }
      ] : [
      for protocol in rule.protocols : [
        {
          from_port   = rule.from_port
          to_port     = rule.to_port
          protocol    = protocol
          cidr_blocks = local.cidr_blocks_test2
          description = rule.description
        }
      ]
    ]
  ])

  rules_map_block2 = { for idx, rule in local.rules_block2 : "${rule.from_port}-${rule.to_port}-${rule.protocol}-${idx}" => rule }

  cidr_blocks_test3 = ["3.3.3.0/24", "4.4.4.0/24"]

  rules_block3 = flatten([
    for rule in [
      { from_port = 1000, to_port = 2000, protocols = ["tcp"], description = "Test TCP Port Range 1000-2000" },
      { from_port = 1000, to_port = 2000, protocols = ["udp"], description = "Test UDP Port Range 1000-2000" }
      ] : [
      for protocol in rule.protocols : [
        {
          from_port   = rule.from_port
          to_port     = rule.to_port
          protocol    = protocol
          cidr_blocks = local.cidr_blocks_test3
          description = rule.description
        }
      ]
    ]
  ])

  rules_map_block3 = { for idx, rule in local.rules_block3 : "${rule.from_port}-${rule.to_port}-${rule.protocol}-${idx}" => rule }
}

# Define the security group
resource "aws_security_group" "example" {
  count       = local.exclude_sg_deployment ? 0 : 1
  name        = "example_security_group"
  description = "Security group for testing purposes"
  vpc_id      = aws_vpc.example.id

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name      = "example-security-group"
    env       = var.environment
    managedby = "terraform"
  }
}

resource "aws_security_group_rule" "ingress_block1" {
  for_each          = local.exclude_sg_deployment ? {} : local.rules_map_block1
  type              = "ingress"
  from_port         = each.value.from_port
  to_port           = each.value.to_port
  protocol          = each.value.protocol
  cidr_blocks       = each.value.cidr_blocks
  description       = each.value.description
  security_group_id = aws_security_group.example[0].id
}

resource "aws_security_group_rule" "ingress_block2" {
  for_each          = local.exclude_sg_deployment || var.environment == "prod" ? {} : local.rules_map_block2
  type              = "ingress"
  from_port         = each.value.from_port
  to_port           = each.value.to_port
  protocol          = each.value.protocol
  cidr_blocks       = each.value.cidr_blocks
  description       = each.value.description
  security_group_id = aws_security_group.example[0].id
}

resource "aws_security_group_rule" "ingress_block3" {
  for_each          = local.exclude_sg_deployment || var.environment != "prod" ? {} : local.rules_map_block3
  type              = "ingress"
  from_port         = each.value.from_port
  to_port           = each.value.to_port
  protocol          = each.value.protocol
  cidr_blocks       = each.value.cidr_blocks
  description       = each.value.description
  security_group_id = aws_security_group.example[0].id
}

output "vpc_id" {
  value = aws_vpc.example.id
}